/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.3.6.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: Wednesday, July 24, 2019
 ***********************************************************************************************/

#ifndef SAMPLE_DEVICE_IMPL
#define SAMPLE_DEVICE_IMPL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

/**
* @brief Result of DigitalTwin command execution.
*/
typedef enum DIGITALTWIN_COMMAND_RESULT_TAG
{
    DIGITALTWIN_COMMAND_OK,
    DIGITALTWIN_COMMAND_TIMEOUT,
    DIGITALTWIN_COMMAND_ERROR
} DIGITALTWIN_COMMAND_RESULT;

typedef struct SENSOR_BLINK_blinkResponse_TAG
{
    char* description;

} SENSOR_BLINK_blinkResponse;

// Device telemetries related APIs

double Sensor_Telemetry_ReadTemp();

double Sensor_Telemetry_ReadHumid();

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName, const char* telemetryName);
void SendTelemetry_Error_Callback(const char* interfaceName, const char* telemetryName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* telemetryName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* telemetryName);

// Device properties related APIs

char* Deviceinfo_Property_GetManufacturer();

char* Deviceinfo_Property_GetModel();

char* Deviceinfo_Property_GetSwVersion();

char* Deviceinfo_Property_GetOsName();

char* Deviceinfo_Property_GetProcessorArchitecture();

char* Deviceinfo_Property_GetProcessorManufacturer();

long Deviceinfo_Property_GetTotalStorage();

long Deviceinfo_Property_GetTotalMemory();

bool Sensor_Property_GetState();

bool Sensor_Property_NameCallback(char* name);

bool Sensor_Property_BrightnessCallback(long brightness);

// Device commands related APIs

DIGITALTWIN_COMMAND_RESULT Sensor_Command_Blink(long interval, SENSOR_BLINK_blinkResponse* response, unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Sensor_Command_Turnon(unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Sensor_Command_Turnoff(unsigned int* statusCode);

DIGITALTWIN_COMMAND_RESULT Sensor_Command_Rundiagnostics();

#ifdef __cplusplus
}
#endif

#endif // SAMPLE_DEVICE_IMPL
